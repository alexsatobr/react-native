{"version":3,"sources":["../../src/models/user.js"],"names":["UserSchema","mongoose","Schema","email","type","String","required","minlength","trim","unique","validate","validator","isEmail","message","password","tokens","access","token","methods","toJSON","user","userObject","toObject","_","pick","generateAuthToken","jwt","sign","_id","toHexString","process","env","JWT_SECRET","toString","push","save","then","removeToken","update","$pull","statics","findByToken","User","decoded","verify","e","Promise","reject","findOne","findByCredentials","resolve","bcrypt","compare","err","res","pre","next","isModified","genSalt","salt","hash","model","module","exports"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport validator from 'validator';\nimport jwt from 'jsonwebtoken';\nimport _ from 'lodash';\nimport bcrypt from 'bcryptjs';\n\n\nconst UserSchema = new mongoose.Schema({\n\temail: {\n\t\ttype: String,\n\t\trequired: true,\n\t\tminlength: 1,\n\t\ttrim: true,\n\t\tunique: true,\n\t\tvalidate: {\n\t\t\tvalidator: validator.isEmail,\n\t\t\tmessage: '{VALUE} is not a valid email'\n\t\t}\n\t},\n\tpassword: {\n\t\ttype: String,\n\t\trequired: true,\n\t\tminlength: 6\n\t},\n\ttokens: [{\n\t\taccess: {\n\t\t\ttype: String,\n\t\t\trequired: true\n\t\t},\n\t\ttoken: {\n\t\t\ttype: String,\n\t\t\trequired: true\n\t\t}\n\t}]\n});\n\nUserSchema.methods.toJSON = function () {\n\tconst user = this;\n\tconst userObject = user.toObject();\n\n\treturn _.pick(userObject, ['_id', 'email']);\n};\n\n\nUserSchema.methods.generateAuthToken = function () {\n\tconst user = this;\n\tconst access = 'auth';\n\tlet token = jwt.sign({_id: user._id.toHexString(), access}, process.env.JWT_SECRET).toString();\n\n\t// user.tokens = user.tokens.concat([{access, token}]);\n\tuser.tokens.push({access, token});\n\n\treturn user.save().then(() => {\n\t\treturn token;\n\t});\n};\n\nUserSchema.methods.removeToken = function (token) {\n\tconst user = this;\n\treturn user.update({\n\t\t$pull: {\n\t\t\ttokens: {\n\t\t\t\ttoken\n\t\t\t}\n\t\t}\n\t});\n};\n\nUserSchema.statics.findByToken = function (token) {\n\tconst User = this;\n\tlet decoded;\n\n\ttry {\n\t\tdecoded = jwt.verify(token, process.env.JWT_SECRET);\n\t} catch (e) {\n\t\treturn Promise.reject();\n\t}\n\t// console.log(decoded);\n\treturn User.findOne({\n\t\t'_id': decoded._id,\n\t\t'tokens.token': token,\n\t\t'tokens.access': 'auth'\n\t});\n};\n\nUserSchema.statics.findByCredentials = function (email, password) {\n\tconst User = this;\n\treturn User.findOne({email}).then((user) => {\n\t\tif (!user) {\n\t\t\treturn Promise.reject();\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tbcrypt.compare(password, user.password, (err, res) => {\n\t\t\t\tif (res) {\n\t\t\t\t\tresolve(user);\n\t\t\t\t} else {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n};\n\nUserSchema.pre('save', function (next) {\n\tconst user = this;\n\n\tif (user.isModified('password')) {\n\t\tbcrypt.genSalt(10, (err, salt) => {\n\t\t\tbcrypt.hash(user.password, salt, (err, hash) => {\n\t\t\t\tuser.password = hash;\n\t\t\t\tnext();\n\t\t\t});\n\t\t});\n\t} else {\n\t\tnext();\n\t}\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nmodule.exports = {User};"],"file":"user.js"}